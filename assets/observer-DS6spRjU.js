import{ag as e,ah as i}from"./chunk-NUUEMKO5-CwXScIoX.js";import{useMDXComponents as t}from"./index-DOvxcyG1.js";import{M as c}from"./mdx-page-with-theme-section-c7cMjpCP.js";import"./index-qVDZzPEr.js";import"./doc-page-BUpmYpE7.js";import"./react-18-CVVedRj1.js";import"./index-DM35cTar.js";import"./iframe-CsW61chZ.js";import"../sb-preview/runtime.js";import"./index-D2o5vtt7.js";import"./index-DrFu-skq.js";const o=[{id:"selection_intersectionobserverchanges",name:"IntersectionObserverChanges"},{id:"selection_mutationobserverchanges",name:"MutationObserverChanges"},{id:"selection_resizeobserverchanges",name:"ResizeObserverChanges"},{id:"selection_intersectionobserverconfig",name:"IntersectionObserverConfig"},{id:"selection_mutationobserverconfig",name:"MutationObserverConfig"},{id:"selection_resizeobserverconfig",name:"ResizeObserverConfig"},{id:"selection_intersectionobserver",name:"intersectionObserver$()"},{id:"selection_mutationobserver",name:"mutationObserver$()"},{id:"selection_resizeobserver",name:"resizeObserver$()"}];function n(s){const r={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...t(),...s.components};return e.jsxs(e.Fragment,{children:[e.jsx(i,{title:"Utils/Observer"}),`
`,e.jsxs(c,{breadcrumb:"Utils",title:"Observer",tocItems:o,hideThemeSwitcher:!0,children:[e.jsx("div",{}),e.jsxs("div",{id:"selection_intersectionobserverchanges",children:[e.jsx(r.h2,{id:"intersectionobserverchanges",children:"IntersectionObserverChanges"}),e.jsxs(r.p,{children:["Represents the changes observed by the ",e.jsx(r.code,{children:"IntersectionObserver"}),`. It includes the list\r
of `,e.jsx(r.code,{children:"IntersectionObserverEntry"})," objects and the associated ",e.jsx(r.code,{children:"IntersectionObserver"}),"."]}),e.jsx(r.h3,{id:"properties",children:"Properties"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Property"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"entries"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"IntersectionObserverEntry[]"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The list of entries observed by the ",e.jsx(r.code,{children:"IntersectionObserver"}),"."]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"observer"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"IntersectionObserver"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"IntersectionObserver"})," instance that triggered the entries."]})})]})]})]})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_mutationobserverchanges",children:[e.jsx(r.h2,{id:"mutationobserverchanges",children:"MutationObserverChanges"}),e.jsxs(r.p,{children:["Represents the changes observed by the ",e.jsx(r.code,{children:"MutationObserver"}),`. It includes the list\r
of `,e.jsx(r.code,{children:"MutationRecord"})," objects and the associated ",e.jsx(r.code,{children:"MutationObserver"}),"."]}),e.jsx(r.h3,{id:"properties-1",children:"Properties"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Property"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"entries"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"MutationRecord[]"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The list of mutation records detected by the ",e.jsx(r.code,{children:"MutationObserver"}),"."]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"observer"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"MutationObserver"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"MutationObserver"})," instance that observed the mutations."]})})]})]})]})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_resizeobserverchanges",children:[e.jsx(r.h2,{id:"resizeobserverchanges",children:"ResizeObserverChanges"}),e.jsxs(r.p,{children:["Represents the changes observed by the ",e.jsx(r.code,{children:"ResizeObserver"}),`. It includes the list\r
of `,e.jsx(r.code,{children:"ResizeObserverEntry"})," objects and the associated ",e.jsx(r.code,{children:"ResizeObserver"}),"."]}),e.jsx(r.h3,{id:"properties-2",children:"Properties"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Property"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"entries"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ResizeObserverEntry[]"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The list of entries observed by the ",e.jsx(r.code,{children:"ResizeObserver"}),"."]})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"observer"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ResizeObserver"})})}),e.jsx("td",{children:e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"ResizeObserver"})," instance that triggered the entries."]})})]})]})]})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_intersectionobserverconfig",children:[e.jsx(r.h2,{id:"intersectionobserverconfig",children:"IntersectionObserverConfig"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`type IntersectionObserverConfig: IntersectionObserverInit;
`})}),e.jsxs(r.p,{children:["Configuration options for creating an ",e.jsx(r.code,{children:"IntersectionObserver"}),"."]}),e.jsxs(r.p,{children:["This type extends ",e.jsx(r.code,{children:"IntersectionObserverInit"}),`, which includes properties such as\r
`,e.jsx(r.code,{children:"root"}),", ",e.jsx(r.code,{children:"rootMargin"}),", and ",e.jsx(r.code,{children:"threshold"}),`. These options control how the observer determines\r
when an element has intersected with the viewport or a specified root element.`]}),e.jsxs(r.ul,{children:[`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"root"}),`: The element used as the viewport for checking visibility of the target.\r
Defaults to the browser viewport if null.`]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"rootMargin"}),`: Margin around the root element. Can be used to grow or shrink\r
the area used for intersections.`]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"threshold"}),`: A single value or array of values from 0 to 1.0, indicating\r
at what percentage of the target's visibility the observer's callback should be invoked.`]}),`
`]}),e.jsx(r.h3,{id:"see",children:"See"}),e.jsx(r.p,{children:"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver"}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_mutationobserverconfig",children:[e.jsx(r.h2,{id:"mutationobserverconfig",children:"MutationObserverConfig"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`type MutationObserverConfig: MutationObserverInit;
`})}),e.jsxs(r.p,{children:["Configuration options for creating a ",e.jsx(r.code,{children:"MutationObserver"}),"."]}),e.jsxs(r.p,{children:["This type extends ",e.jsx(r.code,{children:"MutationObserverInit"}),`, which includes properties such as\r
`,e.jsx(r.code,{children:"attributes"}),", ",e.jsx(r.code,{children:"childList"}),", and ",e.jsx(r.code,{children:"subtree"})," to specify what types of mutations to observe."]}),e.jsxs(r.ul,{children:[`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"attributes"}),": Set to ",e.jsx(r.code,{children:"true"})," to observe changes to attributes on the target elements."]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"childList"}),": Set to ",e.jsx(r.code,{children:"true"})," to observe changes to the direct children of the target."]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"subtree"}),": Set to ",e.jsx(r.code,{children:"true"})," to observe mutations within the target's descendants."]}),`
`]}),e.jsx(r.h3,{id:"see-1",children:"See"}),e.jsx(r.p,{children:"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver"}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_resizeobserverconfig",children:[e.jsx(r.h2,{id:"resizeobserverconfig",children:"ResizeObserverConfig"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`type ResizeObserverConfig: ResizeObserverOptions;
`})}),e.jsxs(r.p,{children:["Configuration options for creating a ",e.jsx(r.code,{children:"ResizeObserver"}),"."]}),e.jsxs(r.p,{children:["This type extends ",e.jsx(r.code,{children:"ResizeObserverOptions"}),", which includes the ",e.jsx(r.code,{children:"box"}),` property to specify\r
which box model to observe:`]}),e.jsxs(r.ul,{children:[`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"content-box"}),": The observer tracks changes to the element's content area (ignores padding and border)."]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"border-box"}),": The observer tracks changes to the element's content, padding, and border (the full element size)."]}),`
`]}),e.jsx(r.h3,{id:"see-2",children:"See"}),e.jsx(r.p,{children:"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/ResizeObserver"}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_intersectionobserver",children:[e.jsx(r.h2,{id:"intersectionobserver",children:"intersectionObserver$()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`function intersectionObserver$(elements: Element | Element[], config?: IntersectionObserverInit): Observable<IntersectionObserverChanges>
`})}),e.jsxs(r.p,{children:["Creates an observable that emits changes from an ",e.jsx(r.code,{children:"IntersectionObserver"}),` whenever\r
one or more elements intersect with the viewport or a specified root element.`]}),e.jsxs(r.p,{children:[`This function is useful for observing elements in a declarative and reactive manner, leveraging\r
RxJS to emit intersection events as observables. The observable is shared among multiple subscribers,\r
meaning the `,e.jsx(r.code,{children:"IntersectionObserver"})," instance is reused, avoiding redundant observations."]}),e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"IntersectionObserver"})," will observe each element in the ",e.jsx(r.code,{children:"elems"}),` array individually, and it will\r
emit an `,e.jsx(r.code,{children:"IntersectionObserverChanges"}),` object whenever any of the observed elements intersects with\r
the viewport or the specified root element.`]}),e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"config"})," parameter allows customization of the ",e.jsx(r.code,{children:"IntersectionObserver"}),`, letting you specify\r
options such as the threshold or root element, controlling when the observer is triggered.`]}),e.jsx(r.h3,{id:"parameters",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"elements"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"Element | Element[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"One or more elements to observe for intersection changes."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsxs(r.p,{children:[e.jsx(r.code,{children:"config"}),"?"]})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"IntersectionObserverInit"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"Optional configuration object to customize the observer (e.g., root, rootMargin, threshold)."})})]})]})]})}),e.jsx(r.h3,{id:"returns",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"Observable<IntersectionObserverChanges>"})}),e.jsxs(r.p,{children:["An observable that emits ",e.jsx(r.code,{children:"IntersectionObserverChanges"})," objects when an intersection change occurs."]}),e.jsx(r.h3,{id:"example",children:"Example"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-typescript",children:`const elements = document.querySelectorAll('.observe-me');\r
const observer$ = intersectionObserver$(elements, { threshold: 0.5 });

observer$.subscribe(({ entries, observer }) => {\r
  entries.forEach((entry) => {\r
    console.log('Element intersected:', entry.target);\r
  });\r
});
`})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_mutationobserver",children:[e.jsx(r.h2,{id:"mutationobserver",children:"mutationObserver$()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`function mutationObserver$(elems: Element | Element[] | Document, config: MutationObserverInit): Observable<MutationObserverChanges>
`})}),e.jsxs(r.p,{children:["Creates an observable that emits changes from a ",e.jsx(r.code,{children:"MutationObserver"}),` whenever\r
mutations occur in the target elements, such as attribute changes, child node modifications,\r
or changes in the subtree, depending on the configuration.`]}),e.jsx(r.p,{children:`This function is useful for observing DOM changes in a declarative and reactive way, leveraging\r
RxJS to emit mutation events as observables. It allows users to track mutations in a stream and\r
respond reactively to changes in the DOM.`}),e.jsxs(r.p,{children:["The observable is shared among subscribers, meaning the ",e.jsx(r.code,{children:"MutationObserver"}),` instance is reused,\r
preventing redundant mutation observations. If multiple elements are passed, each is observed\r
individually, and changes are emitted as they occur.`]}),e.jsx(r.h3,{id:"parameters-1",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"elems"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"Element | Element[] | Document"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"One or more elements to observe for mutations."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"config"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"MutationObserverInit"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"Configuration object to customize what mutations to observe (e.g., attributes, childList, subtree)."})})]})]})]})}),e.jsx(r.h3,{id:"returns-1",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"Observable<MutationObserverChanges>"})}),e.jsxs(r.p,{children:["An observable that emits ",e.jsx(r.code,{children:"MutationObserverChanges"})," objects when mutations occur."]}),e.jsx(r.h3,{id:"example-1",children:"Example"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-typescript",children:`const element = document.getElementById('observed-element');\r
const observer$ = mutationObserver$(element, { attributes: true, childList: true });

observer$.subscribe(({ entries, observer }) => {\r
  entries.forEach((entry) => {\r
    console.log('Mutation observed:', entry);\r
  });\r
});
`})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_resizeobserver",children:[e.jsx(r.h2,{id:"resizeobserver",children:"resizeObserver$()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`function resizeObserver$(elems: Element | Element[], config?: ResizeObserverOptions): Observable<ResizeObserverChanges>
`})}),e.jsxs(r.p,{children:["Creates an observable that emits changes from a ",e.jsx(r.code,{children:"ResizeObserver"}),` whenever\r
the size of one or more elements changes.`]}),e.jsxs(r.p,{children:[`This function is useful in reactive applications where you want to observe changes\r
to an element's size and respond to those changes using RxJS. By using `,e.jsx(r.code,{children:"resizeObserver$"}),`,\r
you can declaratively track resize events, such as when a UI component resizes dynamically,\r
and trigger responses like layout adjustments, animations, or data recalculations.`]}),e.jsxs(r.p,{children:["The observable is shared among subscribers, meaning the ",e.jsx(r.code,{children:"ResizeObserver"}),` instance is reused\r
and multiple subscribers won't trigger redundant resize observations. If multiple elements\r
are provided, each is observed individually.`]}),e.jsx(r.h3,{id:"parameters-2",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"elems"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"Element | Element[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"One or more elements to observe for size changes."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsxs(r.p,{children:[e.jsx(r.code,{children:"config"}),"?"]})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ResizeObserverOptions"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"Optional configuration object to customize which box model to observe."})})]})]})]})}),e.jsx(r.h3,{id:"returns-2",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"Observable<ResizeObserverChanges>"})}),e.jsxs(r.p,{children:["An observable that emits ",e.jsx(r.code,{children:"ResizeObserverChanges"})," objects when size changes occur."]}),e.jsx(r.h3,{id:"example-2",children:"Example"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-typescript",children:`const element = document.getElementById('resize-me');\r
const observer$ = resizeObserver$(element, { box: 'content-box' });

observer$.subscribe(({ entries, observer }) => {\r
  entries.forEach((entry) => {\r
    console.log('Element resized:', entry.target);\r
    console.log('New size:', entry.contentRect);\r
  });\r
});
`})})]})]})]})}function u(s={}){const{wrapper:r}={...t(),...s.components};return r?e.jsx(r,{...s,children:e.jsx(n,{...s})}):n(s)}export{u as default,o as tocItems};
