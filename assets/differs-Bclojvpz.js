import{ag as e,ah as n}from"./chunk-NUUEMKO5-CwXScIoX.js";import{useMDXComponents as d}from"./index-DOvxcyG1.js";import{M as t}from"./mdx-page-with-theme-section-c7cMjpCP.js";import"./index-qVDZzPEr.js";import"./doc-page-BUpmYpE7.js";import"./react-18-CVVedRj1.js";import"./index-DM35cTar.js";import"./iframe-CsW61chZ.js";import"../sb-preview/runtime.js";import"./index-D2o5vtt7.js";import"./index-DrFu-skq.js";const c=[{id:"selection_arraylikedifft",name:"ArrayLikeDiff<T>"},{id:"selection_arraylikediffchanget",name:"ArrayLikeDiffChange<T>"},{id:"selection_arraylikediffoptionst",name:"ArrayLikeDiffOptions<T>"}];function s(i){const r={code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...d(),...i.components};return e.jsxs(e.Fragment,{children:[e.jsx(n,{title:"Utils/Differs"}),`
`,e.jsxs(t,{breadcrumb:"Utils",title:"Differs",tocItems:c,hideThemeSwitcher:!0,children:[e.jsx("div",{}),e.jsxs("div",{id:"selection_arraylikedifft",children:[e.jsx(r.h2,{id:"arraylikedifft",children:"ArrayLikeDiff<T>"}),e.jsx(r.p,{children:"Represents a class for managing and comparing array-like data structures."}),e.jsx(r.p,{children:`This class tracks the differences between the original and updated array-like structures\r
and provides detailed information about the changes, such as added, removed, changed,\r
and reordered items.`}),e.jsx(r.h3,{id:"example",children:"Example"}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const originalArray = [1, 2, 3];\r
const updatedArray = [2, 3, 4];\r
const differ = new ArrayLikeDiff(originalArray);\r
const changes = differ.diff(updatedArray);\r
console.log(changes);
`})}),e.jsx(r.h3,{id:"type-parameters",children:"Type Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Type Parameter"}),e.jsx("th",{children:"Default type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"T"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"any"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The type of the items in the array-like structures being compared."})})]})})]})}),e.jsx(r.h3,{id:"constructors",children:"Constructors"}),e.jsx(r.h4,{id:"new-arraylikediff",children:"new ArrayLikeDiff()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`new ArrayLikeDiff<T>(original: ArrayLikeValue<T>, options: Partial<ArrayLikeDiffOptions<T>>): ArrayLikeDiff<T>
`})}),e.jsx(r.p,{children:"Creates a new instance of ArrayLikeDiff with the provided original data."}),e.jsx(r.h5,{id:"parameters",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"original"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ArrayLikeValue<T>"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The original array-like value to track."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"options"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"Partial<ArrayLikeDiffOptions<T>>"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"An optional object to customize the diff options, like trackBy."})})]})]})]})}),e.jsx(r.h5,{id:"returns",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"ArrayLikeDiff<T>"})}),e.jsx(r.h5,{id:"examples",children:"Examples"}),e.jsx(r.p,{children:"Example with default options:"}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const diff = new ArrayLikeDiff([1, 2, 3]);
`})}),e.jsx(r.p,{children:"Example with custom trackBy function:"}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const diff = new ArrayLikeDiff([1, 2, 3], { trackBy: (item) => item.id });
`})}),e.jsx(r.h3,{id:"methods",children:"Methods"}),e.jsx(r.h4,{id:"diff",children:"diff()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`diff(updated: ArrayLikeValue<T>, updateOriginal: boolean): ArrayLikeDiffChange<T>
`})}),e.jsx(r.p,{children:"Computes the differences between the original and the updated array-like value."}),e.jsx(r.p,{children:`This method compares the original and updated values and returns an object describing\r
the changes such as added, removed, changed, and reordered items.`}),e.jsx(r.h5,{id:"parameters-1",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{children:"Default value"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"updated"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ArrayLikeValue<T>"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"undefined"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The updated array-like value to compare against the original."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"updateOriginal"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"boolean"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"true"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"Whether to update the original array-like value after computing the diff."})})]})]})]})}),e.jsx(r.h5,{id:"returns-1",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"ArrayLikeDiffChange<T>"})}),e.jsx(r.p,{children:"An object detailing the changes between the original and updated values."}),e.jsx(r.h5,{id:"examples-1",children:"Examples"}),e.jsx(r.p,{children:"Basic usage:"}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const changes = diff.diff([2, 3, 4]);\r
console.log(changes);
`})}),e.jsx(r.p,{children:"Don't update the original value after diff, so we can compare a new list with the old original list:"}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const changes = diff.diff([2, 3, 4], false);\r
console.log(changes);
`})}),e.jsx(r.h4,{id:"setoriginal",children:"setOriginal()"}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-ts",children:`setOriginal(original: ArrayLikeValue<T>): void
`})}),e.jsx(r.p,{children:"Sets the original array-like value for diff tracking."}),e.jsx(r.p,{children:`This method allows you to update the original array-like value. After setting a new original\r
value, any further diff operations will compare against this new data.`}),e.jsx(r.h5,{id:"parameters-2",children:"Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Parameter"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"original"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"ArrayLikeValue<T>"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The new array-like value to be considered as the original."})})]})})]})}),e.jsx(r.h5,{id:"returns-2",children:"Returns"}),e.jsx(r.p,{children:e.jsx(r.code,{children:"void"})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_arraylikediffchanget",children:[e.jsx(r.h2,{id:"arraylikediffchanget",children:"ArrayLikeDiffChange<T>"}),e.jsx(r.p,{children:"Describes the changes between two array-like structures."}),e.jsx(r.p,{children:`This interface represents the various types of changes that can occur when comparing\r
the original and updated array-like data, such as items being added, removed, changed,\r
or reordered.`}),e.jsx(r.h3,{id:"type-parameters-1",children:"Type Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Type Parameter"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"T"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The type of the items in the array-like structure."})})]})})]})}),e.jsx(r.h3,{id:"properties",children:"Properties"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Property"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsxs("tbody",{children:[e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"added"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"{ index: number; item: T; newIndex: number; }[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"List of items that were added to the updated array, with their new index."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"changed"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"{ item: T; newIndex: number; previousIndex: number; }[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"List of items that were changed, along with their original and new indices."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"hasChanged"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"boolean"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"Indicates whether any changes were detected between the original and updated arrays."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"removed"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"{ item: T; newIndex: number; previousIndex: number; }[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"List of items that were removed from the original array, along with their previous index."})})]}),e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"reordered"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"{ item: T; newIndex: number; previousIndex: number; }[]"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"List of items that were reordered, along with their original and new indices."})})]})]})]})}),e.jsx(r.hr,{})]}),e.jsxs("div",{id:"selection_arraylikediffoptionst",children:[e.jsx(r.h2,{id:"arraylikediffoptionst",children:"ArrayLikeDiffOptions<T>"}),e.jsxs(r.p,{children:["Options for customizing the behavior of the ",e.jsx(r.code,{children:"ArrayLikeDiff"})," class."]}),e.jsxs(r.p,{children:[`This interface allows you to specify custom options for tracking changes between array-like structures.\r
You can provide a custom `,e.jsx(r.code,{children:"trackBy"}),` function to determine how items are compared, such as comparing by\r
object ID or other criteria.`]}),e.jsx(r.h3,{id:"type-parameters-2",children:"Type Parameters"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Type Parameter"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"T"})})}),e.jsx("td",{children:e.jsx(r.p,{children:"The type of the items in the array-like structure."})})]})})]})}),e.jsx(r.h3,{id:"properties-1",children:"Properties"}),e.jsx("div",{class:"arg-type-table-wrapper",children:e.jsxs("table",{class:"arg-type-table arg-type-table--full-width",children:[e.jsx("thead",{children:e.jsxs("tr",{children:[e.jsx("th",{children:"Property"}),e.jsx("th",{children:"Type"}),e.jsx("th",{class:"description-column",children:"Description"})]})}),e.jsx("tbody",{children:e.jsxs("tr",{children:[e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"trackBy"})})}),e.jsx("td",{children:e.jsx(r.p,{children:e.jsx(r.code,{children:"TrackByFunction<T>"})})}),e.jsxs("td",{children:[e.jsx(r.p,{children:"A function used to track and identify items within the array-like structure."}),e.jsxs(r.p,{children:["The ",e.jsx(r.code,{children:"trackBy"}),` function allows you to customize how items in the array-like structure are compared.\r
For example, you may want to compare objects by their unique ID rather than their entire content.`]}),e.jsx(r.p,{children:e.jsx(r.strong,{children:"Example"})}),e.jsx(r.pre,{children:e.jsx(r.code,{children:`const options: ArrayLikeDiffOptions<MyItem> = {\r
  trackBy: (item) => item.id\r
};
`})})]})]})})]})})]})]})]})}function g(i={}){const{wrapper:r}={...d(),...i.components};return r?e.jsx(r,{...i,children:e.jsx(s,{...i})}):s(i)}export{g as default,c as tocItems};
